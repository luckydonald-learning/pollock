# generated by fastapi-codegen:
#   filename:  ../../Moodle/Webprogrammierung (SoSe 23)/Projekt/Pollack.yaml
#   timestamp: 2023-05-10T16:27:09+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, List, Optional

from pydantic import BaseModel, Field, conint


class PollOption(BaseModel):
    id: int = Field(..., description='The Id of the option.')
    text: str = Field(..., description='The text of the option.')


class PollSetting(BaseModel):
    voices: Optional[conint(ge=1)] = Field(
        None,
        description='The number of votes, in the case that is not set, then all options can be selected. If single choice is to  be used, then it must be set to 1.\n',
    )
    worst: Optional[bool] = Field(
        False, description='If it is true, then *worst* can also be used.'
    )
    deadline: Optional[datetime] = Field(
        None,
        description='Voting can be done up to this point if it has not yet been fixed.',
        example='2023-05-29T19:21:39+02:00',
    )


class StatisticsOption(BaseModel):
    voted: List[int] = Field(
        ...,
        description='In the array are the index of the participants voted the option. The length is the number of the voice.',
    )
    worst: Optional[List[int]] = Field(
        None,
        description='Similar to *voted*, except it\'s an \'if you must." or "in the *worst* case".',
    )


class VoteChoice(BaseModel):
    id: int = Field(..., description='The id of the option of the poll.', example=1)
    worst: Optional[bool] = Field(
        False, description='If the selection is to be the *worst*, then true.'
    )


class User(BaseModel):
    name: str = Field(..., description='The username of the user.')


class Token(BaseModel):
    link: Optional[str] = Field(None, description='A link where the token can be used.')
    value: str = Field(
        ...,
        description='The value should be unique and should not have been assigned yet.',
        example='71yachha3ca48yz7',
    )


class ResponseMessage(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status codes are defined by [RFC 9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-status-codes).',
        example=404,
    )
    message: str = Field(..., example='Poll not found.')


class PollLackPostResponse(ResponseMessage):
    code: Optional[Any] = Field(None, example=405)
    message: Optional[Any] = Field(None, example='Invalid input')


class PollLackTokenGetResponse(ResponseMessage):
    code: Optional[Any] = Field(None, example=410)
    message: Optional[Any] = Field(None, example='Poll is gone.')


class PollLackTokenPutResponse(ResponseMessage):
    code: Optional[Any] = Field(None, example=200)
    message: Optional[Any] = Field(None, example='i. O.')


class PollLackTokenDeleteResponse(ResponseMessage):
    code: Optional[Any] = Field(None, example=200)
    message: Optional[Any] = Field(None, example='i. O.')


class PollLackTokenDeleteResponse1(ResponseMessage):
    code: Optional[Any] = Field(None, example=400)
    message: Optional[Any] = Field(None, example='Invalid poll admin token.')


class VoteLackTokenPostResponse(ResponseMessage):
    code: Optional[Any] = Field(None, example=405)
    message: Optional[Any] = Field(None, example='Invalid input')


class VoteLackTokenPostResponse1(ResponseMessage):
    code: Optional[Any] = Field(None, example=410)
    message: Optional[Any] = Field(None, example='Poll is gone.')


class VoteLackTokenGetResponse(ResponseMessage):
    code: Optional[Any] = Field(None, example=405)
    message: Optional[Any] = Field(None, example='Invalid input')


class VoteLackTokenGetResponse1(ResponseMessage):
    code: Optional[Any] = Field(None, example=410)
    message: Optional[Any] = Field(None, example='Poll is gone.')


class VoteLackTokenPutResponse(ResponseMessage):
    code: Optional[Any] = Field(None, example=200)
    message: Optional[Any] = Field(None, example='i. O.')


class VoteLackTokenDeleteResponse(ResponseMessage):
    code: Optional[Any] = Field(None, example=200)
    message: Optional[Any] = Field(None, example='i. O.')


class VoteLackTokenDeleteResponse1(ResponseMessage):
    code: Optional[Any] = Field(None, example=400)
    message: Optional[Any] = Field(None, example='Invalid poll admin token.')


class PollBody(BaseModel):
    title: str = Field(
        ...,
        description='The title (in most cases a question) of the poll.',
        example='What is your favorite color?',
    )
    description: Optional[str] = Field(
        None,
        description='A description of the poll, as the **title** should be kept short, further information can be stored here,  e.g. what is hidden behind *options*.\n',
        example='By blue are also meant blue-like colors, like turkish.',
    )
    options: List[PollOption] = Field(
        ..., description='The options of the poll.', min_items=2
    )
    setting: Optional[PollSetting] = None
    fixed: Optional[List[int]] = Field(
        None,
        description='The owner, or if there is no owner, someone with the admin token, can set one or more options that will be  set, i.e. the result. This also ends the poll.\n',
        min_items=1,
        unique_items=True,
    )


class PollResult(BaseModel):
    admin: Token
    share: Token


class Vote(BaseModel):
    owner: User
    choice: List[VoteChoice] = Field(..., min_items=1)


class VoteResult(BaseModel):
    edit: Token


class Poll(BaseModel):
    body: PollBody
    share: Token


class Statistics(BaseModel):
    poll: Poll
    participants: List[User] = Field(..., description='The array of users.')
    options: List[StatisticsOption] = Field(
        ...,
        description='The length of the array corresponds to the number of options in the poll.',
    )


class VoteInfo(BaseModel):
    poll: Poll
    vote: Vote
    time: datetime = Field(
        ...,
        description='The time at which the vote was taken.',
        example='2023-05-29T19:21:39+02:00',
    )
